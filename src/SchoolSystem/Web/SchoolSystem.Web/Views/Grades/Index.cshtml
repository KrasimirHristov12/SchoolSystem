@model DisplayGradesViewModel

@{
    this.ViewData["Title"] = "Бележник";
}

<p>Намерени оценки: <span id="grades-count">@Model.TotalGrades</span></p>

<table class="table table-striped table-hover">
    <tr>
        <th><span role="button">Учител↓</span><vc:filter-box filter-elements="Model.Filter.Teachers" type="teachersIds"></vc:filter-box> </th>
        <th><span role="button">Предмет↓</span><vc:filter-box filter-elements="Model.Filter.Subjects" type="subjectsIds"></vc:filter-box></th>
        <th><span role="button">Причина↓</span><vc:filter-box filter-elements="Model.Filter.Reasons" type="reasonsIds"></vc:filter-box></th>
        <th><span role="button">Оценка↓</span><vc:filter-box filter-elements="Model.Filter.Grades" type="gradesValues"></vc:filter-box></th>
        <th><span role="button">Дата↓</span><vc:filter-box filter-elements="Model.Filter.Dates" type="dates"></vc:filter-box></th>
    </tr>
    @foreach (var grade in Model.Grades)
    {
        <tr>
            <td>@grade.TeacherName</td>
            <td>@grade.SubjectName</td>
            <td>@grade.ReasonAsString</td>
            <td>@grade.Value</td>
            <td>@grade.Date</td>
        </tr>
    }

</table>

<ul class="pagination">
    <li class="page-item prev"><a class="page-link" asp-route-page="@(Model.CurrentPage - 1)">Previous</a></li>
    @for (int i = 0; i < Model.TotalPages; i++)
    {
        <li class="page-item"><a class="page-link" asp-route-page="@(i+1)">@(i + 1)</a></li>
    }
    <li class="page-item next"><a class="page-link" asp-route-page="@(Model.CurrentPage + 1)">Next</a></li>
</ul>




@section Scripts {
    <script>
        //FUNCTIONS

        function performAjax(queryString) {
            $.get(`api/grades/GetFilteredGrades?${queryString}`, function (data, status) {
                if (status == "success") {
                    console.log(data);
                    $('table tr:not(":first")').empty();
                    $(".page-item").removeClass("d-none");
                    $("#grades-count").text(data.totalGrades);
                    for (const grade of data.grades) {
                        $('table tbody').append(`
                                    <tr>
                                        <td>${grade.teacherName}</td>
                                        <td>${grade.subjectName}</td>
                                        <td>${grade.reasonAsString}</td>
                                        <td>${grade.value}</td>
                                        <td>${grade.date}</td>
                                    </tr>`)
                        let allPages = $(".page-item").filter(function (index) {
                            return !$(".page-item").eq(index).hasClass("prev") && !$(".page-item").eq(index).hasClass("next");
                        });

                      

                        for (let i = 0; i < allPages.length; i++) {
                            if (i > data.totalPages - 1) {
                                allPages.eq(i).addClass("d-none");
                            }
                        }

                        togglePrevNext(data.currentPage, data.totalPages);


                    }


                }
            });
        }

        function togglePrevNext(currentPage, lastPage) {
            if (currentPage == 1) {
                $(".prev").addClass("pe-none");
            }
            else {
                $(".prev").removeClass("pe-none");
            }

            if (currentPage >= lastPage) {
                $(".next").addClass("pe-none");
            }
            else {
                $(".next").removeClass("pe-none");
            }

        }



    </script>


    <script>
        // PAGING
        let currentPage = @Model.CurrentPage;
        let lastPage = @Model.TotalPages;
        let queryString = '';

        togglePrevNext(currentPage,lastPage);

        $(".page-link").on("click", function(e) {
            e.preventDefault();
            if (!$(this).closest(".page-item").hasClass("prev") && !$(this).closest(".page-item").hasClass("next")) {
                currentPage = parseInt($(this).text());
                
            }
            else {
                if ($(this).closest(".page-item").hasClass("prev") && currentPage > 1) {
                    currentPage -= 1;
                }
                else if ($(this).closest(".page-item").hasClass("next") && currentPage < lastPage) {
                    currentPage += 1;
                }
            }

            if (!queryString.includes("page=")) {
                queryString += `page=${currentPage}`;
                console.log(queryString);
            }
            else {
                queryString = queryString.replace(/page=[0-9]+/i, `page=${currentPage}`);
            }
            performAjax(queryString);
            
        });

    </script>

    <script>
        // DISPLAY/HIDE FILTER BOXES
        $("th span").on("click", function () {
            let currentFilterBox = $(this).next();

            if (currentFilterBox.hasClass("d-none")) {
                currentFilterBox.removeClass("d-none");
            }
            else {
                currentFilterBox.addClass("d-none");
            }
        });


    </script>

    <script>

        Array.prototype.remove = function () {
            var what, a = arguments, L = a.length, ax;
            while (L && this.length) {
                what = a[--L];
                while ((ax = this.indexOf(what)) !== -1) {
                    this.splice(ax, 1);
                }
            }
            return this;
        };
        let queryTeachersArray = [];
        let querySubjectsArray = [];
        let queryReasonsArray = [];
        let queryGradesArray = [];
        let queryDate = "";

        let queryObj = {
            "teachersIds": queryTeachersArray,
            "subjectsIds": querySubjectsArray,
            "reasonsIds": queryReasonsArray,
            "gradesValues": queryGradesArray,
        };

        $("input:checkbox").on("change", function () {
             queryString = `page=1&`;
            let checkBoxIdSplitted = $(this).attr("id").split("-");

            let typeClass = checkBoxIdSplitted[0];

            if ($(this).is(":checked")) {
                if (typeClass !== "dates") {

                    queryObj[typeClass].push($(this).val());
                }
                else {
                    queryDate = $(this).val();
                }
            }
            else {
                if (typeClass !== "dates") {
                    queryObj[typeClass].remove($(this).val());
                }
                else {
                    queryDate = "";
                }
            }

            if (typeClass !== "dates") {

                for (const k of Object.keys(queryObj)) {
                    for (let i = 0; i < queryObj[k].length; i++) {
                        queryString += `${k}[${i}]=${queryObj[k][i]}&`
                    }
                }

            }
            else {

                if (queryDate !== '') {
                    queryString += `date=${queryDate}`;
                }
            }
            console.log(queryString);
            performAjax(queryString);


        });


    </script>
}