@model TakeQuizViewModel

<p id="demo"></p>

<vc:questions-form model="Model.Questions"></vc:questions-form>


@section Scripts {
    <script>
        var countDownDate = new Date("@(Model.QuizEnd.ToString("O"))").getTime();

        var x = setInterval(function () {
            const now = new Date();

            const utcYear = now.getUTCFullYear();
            const utcMonth = now.getUTCMonth() + 1;
            const utcDay = now.getUTCDate();
            const utcHours = now.getUTCHours();
            const utcMinutes = now.getUTCMinutes();
            const utcSeconds = now.getUTCSeconds();
            const utcMilliseconds = now.getUTCMilliseconds();

            const utcDate = new Date(`${utcYear}-${utcMonth}-${utcDay}
                                            ${utcHours}:${utcMinutes}:${utcSeconds}.${utcMilliseconds}`).getTime();

            var distance = countDownDate - utcDate;

            var days = Math.floor(distance / (1000 * 60 * 60 * 24));
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);

            document.getElementById("demo").innerHTML = days + "d " + hours + "h "
                + minutes + "m " + seconds + "s ";

            if (distance < 0) {
                clearInterval(x);
                //$(".submit-exam").click();
            }
        }, 1000);
    </script>

    <script>
        $("header").hide();
        $("body").css('background-color', '#dae0e3');
        $("footer").hide();

        $(".prev-question").click(function (e) {
            e.preventDefault();
            let currentQuestion = $(".question:not(.d-none)");
            let previousQuestion = currentQuestion.prev();
            if (previousQuestion.length == 1) {
                currentQuestion.addClass("d-none");
                previousQuestion.removeClass("d-none");
                $(".next-question").removeClass("disabled");
                if (previousQuestion.attr("id").split("-")[1] == "1") {
                    $(this).addClass("disabled");
                }
                else {
                    $(this).removeClass("disabled");
                }
                
            }
        });

        $(".next-question").click(function (e) {
            e.preventDefault();
            let currentQuestion = $(".question:not(.d-none)");
            let nextQuestion = currentQuestion.next();
            if (nextQuestion.length == 1) {
                currentQuestion.addClass("d-none");
                nextQuestion.removeClass("d-none");
                $(".prev-question").removeClass("disabled");
                if (nextQuestion.is(".question:last")) {
                    $(this).addClass("disabled");
                }
                else {
                    $(this).removeClass("disabled");
                }
            }
        });

        $("input:radio").change(function () {
            let radio = this;
            if ($(radio).is(":checked")) {
                $(radio).next().attr("value", "True");
                $(radio).closest(".answers").find("input:hidden").not($(radio).next()).each(function () {
                    $(this).attr("value", "False");
                })
            }
        });
    </script>

}