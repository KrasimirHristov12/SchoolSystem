@model QuizzesInputModel

<form method="post">
    <div class="mb-3">
        <label asp-for="Name"></label>
        <input asp-for="Name" class="form-control" />
        <div>
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>
    </div>

    <div class="mb-3">
        <label asp-for="SubjectId"></label>
        <select asp-for="SubjectId" class="form-select" asp-items="@(new SelectList(Model.ViewModel.Subjects, "Id", "Name"))">
            <option selected="selected" value="">Моля избери</option>
        </select>
        <div>
            <span asp-validation-for="SubjectId" class="text-danger"></span>
        </div>
    </div>

    <div class="mb-3">
        <label asp-for="ClassesId"></label>
        <select asp-for="ClassesId" class="form-select" asp-items="@(new SelectList(Model.ViewModel.Classes, "Id", "Name"))" data-bs-toggle="tooltip" data-bs-placement="top"
                data-bs-custom-class="custom-tooltip"
                data-bs-title="Може да изберете повече от един клас.">
        </select>
        <div>
            <span asp-validation-for="ClassesId" class="text-danger"></span>
        </div>
    </div>

    <div class="mb-3">
        <label asp-for="QuizType"></label>
        <select asp-for="QuizType" class="form-select" asp-items="@Html.GetEnumSelectList<QuizType>()">
            <option selected="selected" value="">Моля избери</option>
        </select>
        <div>
            <span asp-validation-for="QuizType" class="text-danger"></span>
        </div>
    </div>

    <div class="mb-3">
        <label asp-for="DateTaken"></label>
        <input asp-for="DateTaken" type="text" autocomplete="off" class="form-control" placeholder="Натисни върху полето, за да избереш дата и час." />
        <div>
            <span asp-validation-for="DateTaken" class="text-danger"></span>
        </div>
    </div>

    <div class="mb-3">
        <label asp-for="Duration"></label>
        <input asp-for="Duration" class="form-control" />
        <div>
            <span asp-validation-for="Duration" class="text-danger"></span>
        </div>
    </div>

    <table class="table">
        <tr>
            <th>Оценка</th>
            <th>Точки</th>
        </tr>
        <tr>
            <td><label asp-for="ScaleRangeForPoor"></label></td>
            <td>
                <input class="form-control" asp-for="ScaleRangeForPoor" placeholder="мин-макс (пр. 0-10)" />
                <div>
                    <span asp-validation-for="ScaleRangeForPoor" class="text-danger"></span>
                </div>
            </td>
        </tr>

        <tr>
            <td><label asp-for="ScaleRangeForFair"></label></td>
            <td>
                <input class="form-control" asp-for="ScaleRangeForFair" placeholder="мин-макс (пр. 11-21)" />
                <div>
                    <span asp-validation-for="ScaleRangeForFair" class="text-danger"></span>
                </div>
            </td>
        </tr>

        <tr>
            <td><label asp-for="ScaleRangeForGood"></label></td>
            <td>
                <input class="form-control" asp-for="ScaleRangeForGood" placeholder="мин-макс (пр. 22-32)" />
                <div>
                    <span asp-validation-for="ScaleRangeForGood" class="text-danger"></span>
                </div>
            </td>
        </tr>

        <tr>
            <td><label asp-for="ScaleRangeForVeryGood"></label></td>
            <td>
                <input class="form-control" asp-for="ScaleRangeForVeryGood" placeholder="мин-макс (пр. 33-43)" />
                <div>
                    <span asp-validation-for="ScaleRangeForVeryGood" class="text-danger"></span>
                </div>
            </td>
        </tr>

        <tr>
            <td><label asp-for="ScaleRangeForExcellent"></label></td>
            <td>
                <input class="form-control" asp-for="ScaleRangeForExcellent" placeholder="мин-макс (пр. 43-53)" />
                <div>
                    <span asp-validation-for="ScaleRangeForExcellent" class="text-danger"></span>
                </div>
            </td>
        </tr>
    </table>



    <button class="btn btn-primary display-question">Добавяне на въпрос</button>

    <div class="questions-container">
        <div class="questions-buttons-container" style="margin-top: 10px;"></div>
        @for (int i = 0; i < Model.Questions.Count; i++)
        {
            <div id="question-container-@(i)" class="question-container" style="display: none;">
                <label asp-for="@Model.Questions[i].Title"></label>
                <input asp-for="@Model.Questions[i].Title" class="form-control" />

                <div>
                    <span asp-validation-for="@Model.Questions[i].Title" class="text-danger"></span>
                </div>

                <label asp-for="@Model.Questions[i].Points"></label>
                <input asp-for="@Model.Questions[i].Points" class="form-control" />

                <div>
                    <span asp-validation-for="@Model.Questions[i].Points" class="text-danger"></span>
                </div>
                <label asp-for="@Model.Questions[i].QuestionType">Тип на въпроса</label>
                <select asp-for="@Model.Questions[i].QuestionType" asp-items="Html.GetEnumSelectList<QuestionType>()" class="form-select"></select>
                <div>
                    <span asp-validation-for="@Model.Questions[i].QuestionType" class="text-danger"></span>
                </div>



                <div id="answers-container" class="mb-3">
                    <table class="table">
                        <tr>
                            <th></th>
                            <th>Отговор</th>
                            <th style="text-align: center;">
                                Маркирай като верен отговор
                                <div>
                                    <span asp-validation-for="@Model.Questions[i].Answers.IsFirstAnswerCorrect" class="text-danger"></span>
                                </div>


                            </th>
                        </tr>
                        <tr>
                            <td><label for="option_a">А)</label></td>
                            <td class="option_a_container">
                                <input asp-for="@Model.Questions[i].Answers.FirstAnswerContent" class="form-control ms-2" />

                                <div>
                                    <span asp-validation-for="@Model.Questions[i].Answers.FirstAnswerContent" class="text-danger"></span>
                                </div>
                            </td>

                            <td>
                                <div style="text-align:center;"><input type="checkbox" class="checkboxes" asp-for="@Model.Questions[i].Answers.IsFirstAnswerCorrect" /></div>
                            </td>
                        </tr>
                        <tr>
                            <td><label for="option_b">Б)</label></td>
                            <td class="option_b_container">
                                <input asp-for="@Model.Questions[i].Answers.SecondAnswerContent" class="form-control ms-2" />
                                <div>
                                    <span asp-validation-for="@Model.Questions[i].Answers.SecondAnswerContent" class="text-danger"></span>
                                </div>
                            </td>
                            <td>
                                <div style="text-align:center;"><input type="checkbox" class="checkboxes" asp-for="@Model.Questions[i].Answers.IsSecondAnswerCorrect" /></div>
                            </td>
                        </tr>
                        <tr>
                            <td><label for="option_c">В)</label></td>
                            <td class="option_c_container">
                                <input asp-for="@Model.Questions[i].Answers.ThirdAnswerContent" class="form-control ms-2" />
                                <div>
                                    <span asp-validation-for="@Model.Questions[i].Answers.ThirdAnswerContent" class="text-danger"></span>
                                </div>
                            </td>

                            <td>
                                <div style="text-align:center;"><input type="checkbox" class="checkboxes" asp-for="@Model.Questions[i].Answers.IsThirdAnswerCorrect" /></div>
                            </td>


                        </tr>
                        <tr>
                            <td><label for="option_d">Г)</label></td>
                            <td class="option_d_container">
                                <input asp-for="@Model.Questions[i].Answers.FourthAnswerContent" class="form-control ms-2" />
                                <div>
                                    <span asp-validation-for="@Model.Questions[i].Answers.FourthAnswerContent" class="text-danger"></span>
                                </div>
                            </td>
                            <td>
                                <div style="text-align:center;"><input type="checkbox" class="checkboxes" asp-for="@Model.Questions[i].Answers.IsFourthAnswerCorrect" /></div>
                            </td>

                        </tr>
                    </table>
                </div>

                <button class="btn btn-primary save-question mt-2">Запазване на въпроса</button>
            </div>
        }

        

  
    </div>


    <div class="text-center">
        <button type="submit" class="btn add-test btn-primary mt-2">Добавяне на тест</button>
    </div>
</form>

@section Scripts {



    <script>
        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));

        $.datetimepicker.setLocale('bg');
        jQuery("input#DateTaken").datetimepicker();
    </script>

    <script>
        //CLONE AND ATTACH CLIENT VALIDATION TO THE CLONED ELEMENTS.
        if ($(".question-container").length > 1) {
            $(".question-container").each(function (index) {
                $(".questions-buttons-container").append(`<button id="question-button-${index}" class="question-button" style="margin-right: 10px;">${index + 1}</button>`);
            });
        }




        $(".display-question").click(function (e) {
            e.preventDefault();
            $(".questions-buttons-container button").removeClass("bg-success");
            if ($(".question-container.submitted").length == 0) {
                $(".question-container").eq(-1).fadeIn();
            }
            else if ($(".question-container").eq(-1).hasClass("submitted")) {
                $(".question-container").hide();

                let cloning = $(".question-container").eq(-1).clone(true, true).removeClass("submitted").fadeIn();
                cloning.find(".save-question").text("Запазване на въпроса");
                let prevContainerIndex = parseInt($(".question-container").eq(-1).attr("id").split("-")[2]);

                cloning.attr("id", `question-container-${prevContainerIndex + 1}`)



                cloning.find("label").each(function () {
                    let labelForUpdated = $(this).attr("for").replace(`_${prevContainerIndex}__`, `_${prevContainerIndex + 1}__`);

                    $(this).attr("for", labelForUpdated);

                });
                cloning.find("input:checkbox").each(function () {
                    let ariaDescribedByUpdated = $(this).attr("aria-describedby");
                    //CHECK IF THE ELEMENT HAS SUCH ATTRIBUTE
                    if (typeof ariaDescribedByUpdated !== 'undefined' && ariaDescribedByUpdated !== false) {
                        $(this).attr("aria-describedby", ariaDescribedByUpdated.replace(`[${prevContainerIndex}]`, `[${prevContainerIndex + 1}]`));
                    }

                });

                let valMsg = cloning.find("table tr").eq(0).find("th").eq(2).find("span.text-danger").attr("data-valmsg-for");
                //CHECK IF THE ELEMENT HAS SUCH ATTRIBUTE
                if (typeof valMsg !== 'undefined' && valMsg !== false) {
                    cloning.find("table tr").eq(0).find("th").eq(2).find("span.text-danger").attr("data-valmsg-for", valMsg.replace(`[${prevContainerIndex}]`, `[${prevContainerIndex + 1}]`));
                }

                console.log(cloning.find('input,select'))

                cloning.find('input,select').each(function () {
                    if ($(this).is('input:not(":checkbox")')) {
                        let ariaDescribedByUpdated = $(this).attr("aria-describedby");
                        //CHECK IF THE ELEMENT HAS SUCH ATTRIBUTE
                        if (typeof ariaDescribedByUpdated !== 'undefined' && ariaDescribedByUpdated !== false) {
                            $(this).attr("aria-describedby", ariaDescribedByUpdated.replace(`_${prevContainerIndex}__`, `_${prevContainerIndex + 1}__`));
                        }
                        $(this).val('');
                    }
                    else if ($(this).is("input:checkbox")) {
                        $(this).prop("checked", false);
                    }

                    //FOR SELECT - ASSIGNING TO RADIO
                    else {
                        let ariaDescribedByUpdated = $(this).attr("aria-describedby");
                        //CHECK IF THE ELEMENT HAS SUCH ATTRIBUTE
                        if (typeof ariaDescribedByUpdated !== 'undefined' && ariaDescribedByUpdated !== false) {
                            $(this).attr("aria-describedby", ariaDescribedByUpdated.replace(`_${prevContainerIndex}__`, `_${prevContainerIndex + 1}__`));
                        }
                        $(this).val("0");
                    }

                    let inputId = $(this).attr("id");
                    let inputName = $(this).attr("name");
                    //CHECK IF THE ELEMENT HAS SUCH ATTRIBUTE
                    if (typeof inputId !== 'undefined' && inputId !== false) {
                        $(this).attr("id", inputId.replace(`_${prevContainerIndex}__`, `_${prevContainerIndex + 1}__`));
                    }
                    //CHECK IF THE ELEMENT HAS SUCH ATTRIBUTE
                    if (typeof inputName !== 'undefined' && inputName !== false) {
                        $(this).attr("name", inputName.replace(`[${prevContainerIndex}]`, `[${prevContainerIndex + 1}]`));
                    }


                    if ($(this).is('input:text,select')) {
                        let dataValMsgFor = $(this).next().find("span").eq(0).attr("data-valmsg-for");

                        //CHECK IF THE ELEMENT HAS SUCH ATTRIBUTE
                        if (typeof dataValMsgFor !== 'undefined' && dataValMsgFor !== false) {
                            dataValMsgFor = dataValMsgFor.replace(`[${prevContainerIndex}]`, `[${prevContainerIndex + 1}]`);
                            $(this).next().find("span").eq(0).attr("data-valmsg-for", dataValMsgFor);
                        }


                    }
                    else if ($(this).is('input[type="number"]')) {
                        let dataValMsgFor = $(this).next().next().find("span").eq(0).attr("data-valmsg-for");

                        //CHECK IF THE ELEMENT HAS SUCH ATTRIBUTE
                        if (typeof dataValMsgFor !== 'undefined' && dataValMsgFor !== false) {
                            dataValMsgFor = dataValMsgFor.replace(`[${prevContainerIndex}]`, `[${prevContainerIndex + 1}]`);
                            $(this).next().next().find("span").eq(0).attr("data-valmsg-for", dataValMsgFor);
                        }
                    }

                });

                cloning.insertAfter($(".question-container").eq(-1));

            }
            else if ($(".question-container").eq(-1).is(":hidden")) {
                $(".question-container").hide();
                $(".question-container").eq(-1).fadeIn();
            }


            //WITHOUT THIS, CLIENT VALIDATION DOES NOT WORK ON CLONINGS!!!
            $("form").removeData('validator').removeData('unobtrusiveValidation');
            $.validator.unobtrusive.parse($("form"));


        });

        // LIMIT TO ONE ALLOWED CHECK IF RADIO
        $("input:checkbox").change(function () {
            if ($(this).closest(".question-container").find("select").val() == '0') {
                if ($(this).is(":checked") && $(this).closest("#answers-container").find("input:checkbox:checked").length > 1) {
                    $(this).closest("#answers-container").find("input:checkbox:checked").not($(this)).prop("checked", false);
                }
            }
        });

    </script>

    <script>

        //TRIGGER VALIDATION ON EACH DISPLAYED CHECKBOX, IF ONE OF THE CHECKBOXES IS CHECKED THE RULE checkatleastone WILL RETURN TRUE FOR ALL OF THEM WHICH WILL HIDE THE ERROR MESSAGE


        $(".question-container").find("#answers-container").find("input:checkbox").change(function () {
            $(".question-container").find("#answers-container").find("input:checkbox").each(function () {

                console.log($(this));

                $("form").validate().element('#' + $(this).attr("id"));
            });

        });

        $(".question-container").find('input:text,input[type="number"]').on("keyup", function () {
            $("form").validate().element('#' + $(this).attr("id"));
        });




        $(".save-question").click(function (e) {

            e.preventDefault();

            let questionsContainer = $(".question-container:not(:hidden)").eq(0);
            let answerContainer = questionsContainer.find("#answers-container");


            let currentQuestion = questionsContainer.attr("id").split("-")[2];




            //PERFORM VALIDATION ON  INPUT INDIVIDUALLY

            console.log(questionsContainer.find("input"));

            questionsContainer.find('input:not(":hidden")').each(function () {

                $("form").validate().element('#' + $(this).attr("id"));
            });



            if (questionsContainer.find("input.input-validation-error").length === 0) {
                let questionNumber = parseInt(questionsContainer.attr("id").split("-")[2]) + 1;
                if ($(`#question-button-${questionNumber - 1}`).length == 0) {
                    $(".questions-buttons-container").append(`<button id="question-button-${questionNumber - 1}" class="question-button" style="margin-right: 10px;">${questionNumber}</button>`);

                }

                questionsContainer.hide();
                if (!questionsContainer.hasClass("submitted")) {
                    questionsContainer.addClass("submitted");
                }
                $(`#question-button-${questionNumber - 1}`).removeClass("bg-success");

            }
        });

        $(".questions-buttons-container").on("click", ".question-button", function (e) {
            e.preventDefault();
            let questionIndex = parseInt($(this).text()) - 1;

            $(".questions-buttons-container button").removeClass("bg-success");

            $(this).addClass("bg-success");

            $(".question-container").hide();
            $(`#question-container-${questionIndex}`).fadeIn();
            $(`#question-container-${questionIndex}`).find(".save-question").text("Редактиране на въпроса");
        })

    </script>

    <script>
        $(".add-test").click(function (e) {
            e.preventDefault();
            if ($(".question-container.submitted").length == 0) {
                $(".question-container").eq(-1).show();
                $("form").validate().form();
            }
            else if ($(".question-container:not(:hidden)").length == 0) {
                $(".add-test").unbind("click");
                $(".add-test").click();
            }

        });

    </script>
}
